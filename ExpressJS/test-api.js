// Script ƒë·ªÉ test c√°c API ƒë√£ tri·ªÉn khai
const axios = require('axios');

const BASE_URL = 'http://localhost:8080/v1/api';

// Test data
const testUser = {
    name: 'Test User',
    email: 'test@example.com',
    password: 'password123'
};

const testProduct = {
    name: 'Test Product',
    price: 100000,
    category: 'Electronics',
    description: 'This is a test product',
    tags: ['test', 'electronics'],
    brand: 'TestBrand'
};

let authToken = '';
let productId = '';
let userId = '';

async function testAPI() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test API...\n');

    try {
        // 1. Test ƒëƒÉng k√Ω user
        console.log('1. Testing user registration...');
        try {
            const registerResponse = await axios.post(`${BASE_URL}/register`, testUser);
            console.log('‚úÖ User registration successful');
            console.log('Response:', registerResponse.data);
        } catch (error) {
            if (error.response?.status === 400) {
                console.log('‚ÑπÔ∏è User already exists, continuing...');
            } else {
                throw error;
            }
        }

        // 2. Test ƒëƒÉng nh·∫≠p
        console.log('\n2. Testing user login...');
        const loginResponse = await axios.post(`${BASE_URL}/login`, {
            email: testUser.email,
            password: testUser.password
        });
        authToken = loginResponse.data.data.access_token;
        userId = loginResponse.data.data.user.id;
        console.log('‚úÖ User login successful');
        console.log('Token:', authToken.substring(0, 20) + '...');

        // 3. Test t·∫°o s·∫£n ph·∫©m (c·∫ßn th√™m API n√†y)
        console.log('\n3. Testing product creation...');
        // Note: C·∫ßn th√™m API t·∫°o s·∫£n ph·∫©m trong ProductController
        console.log('‚ö†Ô∏è Product creation API not implemented yet');

        // 4. Test l·∫•y danh s√°ch s·∫£n ph·∫©m
        console.log('\n4. Testing get products...');
        const productsResponse = await axios.get(`${BASE_URL}/product`);
        console.log('‚úÖ Get products successful');
        console.log('Products count:', productsResponse.data.data.products.length);
        
        if (productsResponse.data.data.products.length > 0) {
            productId = productsResponse.data.data.products[0]._id;
            console.log('Using product ID:', productId);
        }

        // 5. Test l·∫•y chi ti·∫øt s·∫£n ph·∫©m
        if (productId) {
            console.log('\n5. Testing get product detail...');
            const productDetailResponse = await axios.get(`${BASE_URL}/product/${productId}`, {
                headers: { Authorization: `Bearer ${authToken}` }
            });
            console.log('‚úÖ Get product detail successful');
            console.log('Product:', productDetailResponse.data.data.product.name);
        }

        // 6. Test toggle favorite
        if (productId) {
            console.log('\n6. Testing toggle favorite...');
            const favoriteResponse = await axios.post(`${BASE_URL}/product/${productId}/favorite`, {}, {
                headers: { Authorization: `Bearer ${authToken}` }
            });
            console.log('‚úÖ Toggle favorite successful');
            console.log('Is favorite:', favoriteResponse.data.isFavorite);
        }

        // 7. Test l·∫•y s·∫£n ph·∫©m y√™u th√≠ch
        console.log('\n7. Testing get favorite products...');
        const favoritesResponse = await axios.get(`${BASE_URL}/user/favorite-products`, {
            headers: { Authorization: `Bearer ${authToken}` }
        });
        console.log('‚úÖ Get favorite products successful');
        console.log('Favorite products count:', favoritesResponse.data.data.length);

        // 8. Test l·∫•y s·∫£n ph·∫©m ƒë√£ xem
        console.log('\n8. Testing get viewed products...');
        const viewedResponse = await axios.get(`${BASE_URL}/user/viewed-products`, {
            headers: { Authorization: `Bearer ${authToken}` }
        });
        console.log('‚úÖ Get viewed products successful');
        console.log('Viewed products count:', viewedResponse.data.data.length);

        // 9. Test t·∫°o review
        if (productId) {
            console.log('\n9. Testing create review...');
            const reviewData = {
                rating: 5,
                comment: 'This is a great product! Highly recommended.'
            };
            const reviewResponse = await axios.post(`${BASE_URL}/product/${productId}/review`, reviewData, {
                headers: { Authorization: `Bearer ${authToken}` }
            });
            console.log('‚úÖ Create review successful');
            console.log('Review ID:', reviewResponse.data.data._id);
        }

        // 10. Test l·∫•y reviews c·ªßa s·∫£n ph·∫©m
        if (productId) {
            console.log('\n10. Testing get product reviews...');
            const reviewsResponse = await axios.get(`${BASE_URL}/product/${productId}/reviews`);
            console.log('‚úÖ Get product reviews successful');
            console.log('Reviews count:', reviewsResponse.data.data.reviews.length);
        }

        // 11. Test l·∫•y th·ªëng k√™ s·∫£n ph·∫©m
        if (productId) {
            console.log('\n11. Testing get product stats...');
            const statsResponse = await axios.get(`${BASE_URL}/product/${productId}/stats`);
            console.log('‚úÖ Get product stats successful');
            console.log('Stats:', statsResponse.data.data);
        }

        // 12. Test l·∫•y reviews c·ªßa user
        console.log('\n12. Testing get user reviews...');
        const userReviewsResponse = await axios.get(`${BASE_URL}/user/reviews`, {
            headers: { Authorization: `Bearer ${authToken}` }
        });
        console.log('‚úÖ Get user reviews successful');
        console.log('User reviews count:', userReviewsResponse.data.data.reviews.length);

        console.log('\nüéâ T·∫•t c·∫£ test ƒë√£ ho√†n th√†nh th√†nh c√¥ng!');

    } catch (error) {
        console.error('‚ùå Test failed:', error.response?.data || error.message);
        console.error('Status:', error.response?.status);
        console.error('URL:', error.config?.url);
    }
}

// Ch·∫°y test
testAPI();
